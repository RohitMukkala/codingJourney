"""Initial schema for new project"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c79caa658635'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('clerk_id', sa.String(length=255), nullable=False, comment='Clerk-provided user ID (primary key)'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Cached email from Clerk (read-only)'),
    sa.Column('leetcode_username', sa.String(length=50), nullable=True),
    sa.Column('github_username', sa.String(length=39), nullable=True),
    sa.Column('codechef_username', sa.String(length=20), nullable=True),
    sa.Column('codeforces_username', sa.String(length=24), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('clerk_id')
    )
    op.create_index(op.f('ix_users_clerk_id'), 'users', ['clerk_id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('coding_profiles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Internal profile ID'),
    sa.Column('clerk_id', sa.String(length=255), nullable=False),
    sa.Column('platform', sa.String(length=20), nullable=False, comment='Platform name (github/leetcode/codechef/codeforces)'),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('total_contributions', sa.Integer(), nullable=True),
    sa.Column('current_streak', sa.Integer(), nullable=True),
    sa.Column('longest_streak', sa.Integer(), nullable=True),
    sa.Column('total_stars', sa.Integer(), nullable=True),
    sa.Column('total_forks', sa.Integer(), nullable=True),
    sa.Column('languages', sa.JSON(), nullable=True, comment='Language usage percentages (GitHub only)'),
    sa.Column('total_problems_solved', sa.Integer(), nullable=True),
    sa.Column('easy_solved', sa.Integer(), nullable=True),
    sa.Column('medium_solved', sa.Integer(), nullable=True),
    sa.Column('hard_solved', sa.Integer(), nullable=True),
    sa.Column('easy_percentage', sa.Float(), nullable=True),
    sa.Column('medium_percentage', sa.Float(), nullable=True),
    sa.Column('hard_percentage', sa.Float(), nullable=True),
    sa.Column('problem_categories', sa.JSON(), nullable=True, comment='LeetCode problem categories in format:\n            {\n                "beats_stats": {"easy": 95.6, "medium": 82.3},\n                "ranking": 1500,\n                "contribution_points": 450\n            }'),
    sa.Column('current_rating', sa.Integer(), nullable=True),
    sa.Column('highest_rating', sa.Integer(), nullable=True),
    sa.Column('global_rank', sa.Integer(), nullable=True),
    sa.Column('country_rank', sa.Integer(), nullable=True),
    sa.Column('stars', sa.String(length=10), nullable=True),
    sa.Column('codeforces_rating', sa.Integer(), nullable=True),
    sa.Column('codeforces_max_rating', sa.Integer(), nullable=True),
    sa.Column('problems_solved_count', sa.Integer(), nullable=True),
    sa.Column('contest_rating', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['clerk_id'], ['users.clerk_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('clerk_id', 'platform', name='unique_user_platform')
    )
    op.create_index('idx_last_updated', 'coding_profiles', ['last_updated'], unique=False)
    op.create_index('idx_platform_username', 'coding_profiles', ['platform', 'username'], unique=False)
    op.create_index(op.f('ix_coding_profiles_clerk_id'), 'coding_profiles', ['clerk_id'], unique=False)
    op.create_index(op.f('ix_coding_profiles_last_updated'), 'coding_profiles', ['last_updated'], unique=False)
    op.create_index(op.f('ix_coding_profiles_platform'), 'coding_profiles', ['platform'], unique=False)
    op.create_index(op.f('ix_coding_profiles_username'), 'coding_profiles', ['username'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_coding_profiles_username'), table_name='coding_profiles')
    op.drop_index(op.f('ix_coding_profiles_platform'), table_name='coding_profiles')
    op.drop_index(op.f('ix_coding_profiles_last_updated'), table_name='coding_profiles')
    op.drop_index(op.f('ix_coding_profiles_clerk_id'), table_name='coding_profiles')
    op.drop_index('idx_platform_username', table_name='coding_profiles')
    op.drop_index('idx_last_updated', table_name='coding_profiles')
    op.drop_table('coding_profiles')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_clerk_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ### 